package agecalculator;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Subham
 */
import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;

public class MainInterface extends javax.swing.JFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(MainInterface.class.getName());

    // Inner class for numeric input filter
    class NumericDocumentFilter extends DocumentFilter {
        @Override
        public void insertString(FilterBypass fb, int offset, String string, AttributeSet attr)
                throws BadLocationException {
            if (isNumeric(string)) {
                super.insertString(fb, offset, string, attr);
            } else {
                showInputErrorMessage();
            }
        }

        @Override
        public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs)
                throws BadLocationException {
            if (isNumeric(text)) {
                super.replace(fb, offset, length, text, attrs);
            } else {
                showInputErrorMessage();
            }
        }

        private boolean isNumeric(String text) {
            if (text == null || text.isEmpty()) {
                return true; // Allow empty string for deletion
            }
            return text.matches("\\d*"); // Only digits allowed
        }

        private void showInputErrorMessage() {
            JOptionPane.showMessageDialog(MainInterface.this, 
                "Only numbers are allowed in Day and Year fields!", 
                "Invalid Input", 
                JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Creates new form MainInterface
     */
    public MainInterface() {
        initComponents();
        // Set current date on launch with compact format to maintain layout
        LocalDate today = LocalDate.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        currentDate.setText("Today's Date - " + today.format(formatter));
        
        // Apply numeric filter to day and year text fields
        NumericDocumentFilter numericFilter = new NumericDocumentFilter();
        ((AbstractDocument) dayTextfield.getDocument()).setDocumentFilter(numericFilter);
        ((AbstractDocument) yearTextfield1.getDocument()).setDocumentFilter(numericFilter);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Background = new javax.swing.JPanel();
        MainTitle = new javax.swing.JLabel();
        Line = new javax.swing.JLabel();
        currentDate = new javax.swing.JLabel();
        day = new javax.swing.JLabel();
        dayTextfield = new javax.swing.JTextField();
        month = new javax.swing.JLabel();
        monthComboBox = new javax.swing.JComboBox<>();
        year = new javax.swing.JLabel();
        yearTextfield1 = new javax.swing.JTextField();
        calculate = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        currentAge = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Background.setBackground(new java.awt.Color(153, 255, 204));

        MainTitle.setBackground(new java.awt.Color(255, 255, 0));
        MainTitle.setFont(new java.awt.Font("Cambria", 1, 36)); // NOI18N
        MainTitle.setForeground(new java.awt.Color(0, 0, 255));
        MainTitle.setText("Your Age Calculator");

        Line.setBackground(new java.awt.Color(0, 0, 0));
        Line.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        Line.setText("Enter Your D.O.B & see how old you are");

        currentDate.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        currentDate.setText("Today's Date - ");

        day.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        day.setText("Day :");

        month.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        month.setText("Month\n :");

        monthComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        monthComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthComboBoxActionPerformed(evt);
            }
        });

        year.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        year.setText("Year :");

        calculate.setText("Calculate");

        reset.setText("Reset");

        currentAge.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        currentAge.setText("Your Age - ");

        javax.swing.GroupLayout BackgroundLayout = new javax.swing.GroupLayout(Background);
        Background.setLayout(BackgroundLayout);
        BackgroundLayout.setHorizontalGroup(
            BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackgroundLayout.createSequentialGroup()
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BackgroundLayout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(Line))
                    .addGroup(BackgroundLayout.createSequentialGroup()
                        .addGap(233, 233, 233)
                        .addComponent(MainTitle))
                    .addGroup(BackgroundLayout.createSequentialGroup()
                        .addGap(255, 255, 255)
                        .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(currentAge)
                            .addComponent(calculate))
                        .addGap(62, 62, 62)
                        .addComponent(reset))
                    .addGroup(BackgroundLayout.createSequentialGroup()
                        .addGap(272, 272, 272)
                        .addComponent(currentDate)))
                .addContainerGap(62, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BackgroundLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(day, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dayTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(month)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(monthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(year)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(yearTextfield1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(174, 174, 174))
        );
        BackgroundLayout.setVerticalGroup(
            BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackgroundLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(MainTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Line)
                .addGap(33, 33, 33)
                .addComponent(currentDate)
                .addGap(39, 39, 39)
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(day)
                    .addComponent(dayTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(month)
                    .addComponent(monthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(year)
                    .addComponent(yearTextfield1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(BackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(calculate)
                    .addComponent(reset))
                .addGap(27, 27, 27)
                .addComponent(currentAge)
                .addGap(36, 36, 36))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void monthComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_monthComboBoxActionPerformed

    private void calculateActionPerformed(java.awt.event.ActionEvent evt) {                                          
        try {
            // Get input values
            String dayText = dayTextfield.getText().trim();
            String yearText = yearTextfield1.getText().trim();
            
            // Check for empty inputs
            if (dayText.isEmpty() || yearText.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill in all fields", "Missing Input", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            int day = Integer.parseInt(dayText);
            int month = monthComboBox.getSelectedIndex() + 1; // Adding 1 since index starts at 0
            int year = Integer.parseInt(yearText);
            
            // Validate date ranges
            if (day < 1 || day > 31) {
                JOptionPane.showMessageDialog(this, "Day must be between 1 and 31", "Invalid Input", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            if (year < 1900 || year > LocalDate.now().getYear()) {
                JOptionPane.showMessageDialog(this, "Year must be between 1900 and " + LocalDate.now().getYear(), "Invalid Input", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Create date of birth and validate it's a real date
            LocalDate dob;
            try {
                dob = LocalDate.of(year, month, day);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Invalid date. Please check the day and month combination.", "Invalid Date", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            LocalDate now = LocalDate.now();
            
            if (dob.isAfter(now)) {
                JOptionPane.showMessageDialog(this, "Date of birth cannot be in the future", "Invalid Input", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // Calculate age
            Period period = Period.between(dob, now);
            
            // Display result - only show years
            currentAge.setText(String.format("Your Age - %d years", 
                    period.getYears()));
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter valid numbers for day and year", 
                    "Invalid Input", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error calculating age: " + e.getMessage(), 
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }                                         

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // Clear all inputs
        dayTextfield.setText("");
        monthComboBox.setSelectedIndex(0);
        yearTextfield1.setText("");
        currentAge.setText("Your Age - ");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new MainInterface().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Background;
    private javax.swing.JLabel Line;
    private javax.swing.JLabel MainTitle;
    private javax.swing.JButton calculate;
    private javax.swing.JLabel currentAge;
    private javax.swing.JLabel currentDate;
    private javax.swing.JLabel day;
    private javax.swing.JTextField dayTextfield;
    private javax.swing.JLabel month;
    private javax.swing.JComboBox<String> monthComboBox;
    private javax.swing.JButton reset;
    private javax.swing.JLabel year;
    private javax.swing.JTextField yearTextfield1;
    // End of variables declaration//GEN-END:variables
}
